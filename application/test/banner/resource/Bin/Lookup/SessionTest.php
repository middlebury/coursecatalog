<?php

/**
 * Test class for banner_resource_Bin_Lookup_Session.
 * Generated by PHPUnit on 2010-05-20 at 14:39:12.
 */
class banner_resource_Bin_Lookup_SessionTest extends phpkit_test_phpunit_AbstractOsidSessionTest
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_resource_Bin_Lookup_Session
     */
    protected osid_resource_BinLookupSession $session;
    protected osid_resource_ResourceManager $manager;
    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_id_Id $unknownId;
    private osid_type_Type $unknownType;
    private osid_type_Type $generaNoneType;
    private osid_type_Type $secondaryType;
    private osid_type_Type $undergraduateType;

    /**
     * Answer the session object to test.
     *
     * @return osid_OsidSession
     *
     * @since 4/15/09
     */
    protected function getSession()
    {
        return $this->session;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->manager = self::$courseManager->getResourceManager();
        $this->session = $this->manager->getBinLookupSession();

        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MIIS');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:unknown_id');

        $this->unknownType = new phpkit_type_URNInetType('urn:inet:osid.org:unknown_type');

        $this->generaNoneType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:none');
        $this->secondaryType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:secondary');
        $this->undergraduateType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:undergraduate');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->session->close();
    }

    public function testCanLookupBins()
    {
        $this->assertTrue($this->session->canLookupBins());
    }

    public function testUseComparativeBinView()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testUsePlenaryBinView()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testGetBin()
    {
        $this->assertInstanceOf('osid_resource_Bin', $this->session->getBin($this->mcugId));
        $this->assertInstanceOf('osid_resource_Bin', $this->session->getBin($this->miisId));
        try {
            $bin = $this->session->getBin($this->unknownId);
            $this->fail('An osid_NotFoundException should have been thrown.');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true);
        }
    }

    public function testGetBinsByIds()
    {
        $this->session->useComparativeBinView();
        $bins = $this->session->getBinsByIds(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->miisId]));
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertEquals(2, $bins->available());
    }

    public function testGetBinsByGenusType()
    {
        $bins = $this->session->getBinsByGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertTrue($bins->hasNext());

        $bins = $this->session->getBinsByGenusType($this->secondaryType);
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertFalse($bins->hasNext());
    }

    public function testGetBinsByParentGenusType()
    {
        $bins = $this->session->getBinsByParentGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertTrue($bins->hasNext());

        $bins = $this->session->getBinsByParentGenusType($this->secondaryType);
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertFalse($bins->hasNext());
    }

    public function testGetBinsByRecordType()
    {
        $bins = $this->session->getBinsByRecordType($this->unknownType);
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertFalse($bins->hasNext());
    }

    public function testGetBins()
    {
        $bins = $this->session->getBins();
        $this->assertInstanceOf('osid_resource_BinList', $bins);
        $this->assertTrue($bins->hasNext());
    }
}
