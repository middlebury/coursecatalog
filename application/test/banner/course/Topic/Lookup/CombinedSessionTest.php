<?php

use PHPUnit\Framework\TestCase;

/**
 * Test class for banner_course_Topic_Lookup_Session.
 * Generated by PHPUnit on 2009-04-24 at 12:50:04.
 */
class banner_course_Topic_Lookup_CombinedSessionTest extends TestCase
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseCatalog_Lookup_Session
     */
    protected osid_course_TopicLookupSession $session;

    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_id_Id $unknownId;
    private osid_id_Id $termId;
    private osid_id_Id $physId;
    private osid_id_Id $geolId;
    private osid_id_Id $chemId;
    private osid_id_Id $physSubjId;
    private osid_id_Id $geolSubjId;
    private osid_id_Id $chemSubjId;
    private osid_id_Id $physDeptId;
    private osid_id_Id $geolDeptId;
    private osid_id_Id $chemDeptId;
    private osid_id_Id $dedReqId;
    private osid_id_Id $sciReqId;
    private osid_id_Id $ugLevelId;
    private osid_id_Id $ccBlockId;
    private osid_id_Id $nsciDivId;
    private osid_id_Id $artsDivId;
    private osid_type_Type $subjectType;
    private osid_type_Type $departmentType;
    private osid_type_Type $divisionType;
    private osid_type_Type $requirementType;
    private osid_type_Type $levelType;
    private osid_type_Type $blockType;
    private osid_id_Id $physOfferingId;
    private osid_id_Id $geolOfferingId;
    private osid_id_Id $unknownOfferingId;
    private osid_type_Type $unknownType;
    private osid_type_Type $generaNoneType;
    private osid_type_Type $secondaryType;
    private osid_type_Type $undergraduateType;

    /**
     * Answer the session object to test.
     *
     * @return osid_OsidSession
     *
     * @since 4/15/09
     */
    protected function getSession()
    {
        return $this->session;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MIIS');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:unknown_id');

        $this->session = self::$courseManager->getTopicLookupSession();
        $this->session->useComparativeView();
        $this->session->useFederatedCourseCatalogView();

        $this->physId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.PHYS0201');
        $this->geolId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.GEOL0300');
        $this->chemId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.CHEM0104');

        $this->physSubjId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.subject.PHYS');
        $this->geolSubjId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.subject.GEOL');
        $this->chemSubjId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.subject.CHEM');

        $this->physDeptId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.department.PHYS');
        $this->geolDeptId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.department.GEOL');
        $this->chemDeptId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.department.CHEM');

        $this->dedReqId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.requirement.DED');
        $this->sciReqId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.requirement.SCI');

        $this->ccBlockId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.block.CC');

        $this->nsciDivId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.division.NSCI');
        $this->artsDivId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.division.ARTS');

        $this->subjectType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:topic.subject');
        $this->departmentType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:topic.department');
        $this->divisionType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:topic.division');
        $this->requirementType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:topic.requirement');
        $this->blockType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:topic.block');

        $this->physOfferingId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:section.200893.90143');
        $this->geolOfferingId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:section.200420.20663');
        $this->unknownOfferingId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:section.178293.2101');

        $this->termId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term.200893');

        $this->unknownType = new phpkit_type_URNInetType('urn:inet:osid.org:unknown_type');

        $this->generaNoneType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:none');
        $this->secondaryType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:secondary');
        $this->undergraduateType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:undergraduate');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    public function testGetCourseCatalogId()
    {
        $this->assertInstanceOf('osid_id_Id', $this->session->getCourseCatalogId());
        //         $this->assertTrue($this->manager->getCombinedCatalogId()->isEqual($this->session->getCourseCatalogId()));
    }

    public function testGetCourseCatalog()
    {
        $this->assertInstanceOf('osid_course_CourseCatalog', $this->session->getCourseCatalog());
        //         $this->assertTrue($this->manager->getCombinedCatalogId()->isEqual($this->session->getCourseCatalog()->getId()));
    }

    public function testCanLookupTopics()
    {
        $this->assertTrue($this->session->canLookupTopics());
    }

    public function testUseComparativeTopicView()
    {
        $this->session->useComparativeTopicView();
        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId, $this->unknownId]));
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertEquals(2, $topics->available());
    }

    /**
     * Should thrown osid_NotFoundExceptions for unknown results.
     */
    public function testUsePlenaryTopicView()
    {
        $this->expectException(osid_NotFoundException::class);

        $this->session->usePlenaryTopicView();
        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId, $this->unknownId]));
    }

    public function testUseFederatedCourseCatalogView()
    {
        $this->session->useFederatedCourseCatalogView();

        $this->session->useComparativeTopicView();
        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId, $this->unknownId]));
        $this->assertEquals(2, $topics->available());

        $this->session->usePlenaryTopicView();
        try {
            $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
                $this->geolSubjId, $this->physDeptId, $this->unknownId]));
            $this->fail('should have thrown an osid_NotFoundException.');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true);
        }
    }

    public function testUseIsolatedCourseCatalogView()
    {
        $this->session->useIsolatedCourseCatalogView();

        $this->session->useComparativeTopicView();
        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId, $this->unknownId]));
        $this->assertEquals(0, $topics->available());

        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId]));
        $this->assertEquals(0, $topics->available());

        $this->session->usePlenaryTopicView();
        try {
            $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
                $this->geolSubjId, $this->physDeptId, $this->unknownId]));
            $this->fail('should have thrown an osid_NotFoundException.');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true);
        }

        try {
            $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
                $this->geolSubjId, $this->physDeptId]));
            $this->fail('should have thrown an osid_NotFoundException.');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true);
        }
    }

    public function testGetTopic()
    {
        $this->assertInstanceOf('osid_course_Topic', $this->session->getTopic($this->physSubjId));
        $this->assertInstanceOf('osid_course_Topic', $this->session->getTopic($this->chemDeptId));
        $this->assertInstanceOf('osid_course_Topic', $this->session->getTopic($this->dedReqId));
        $this->assertInstanceOf('osid_course_Topic', $this->session->getTopic($this->nsciDivId));
    }

    public function testGetTopicsByIds()
    {
        $topics = $this->session->getTopicsByIds(new phpkit_id_ArrayIdList([
            $this->geolSubjId, $this->physDeptId, $this->sciReqId, $this->nsciDivId]));
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(4, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertFalse($topics->hasNext());
        $this->assertEquals(0, $topics->available());
    }

    public function testGetTopicsByRequirementGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->requirementType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(2, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->requirementType));
    }

    public function testGetTopicsByDepartmentGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->departmentType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(4, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->departmentType));
    }

    public function testGetTopicsByBlockGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->blockType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(1, $topics->available());
        $topic = $topics->getNextTopic();
        $this->assertInstanceOf('osid_course_Topic', $topic);
        $this->assertTrue($topic->getGenusType()->isEqual($this->blockType));
    }

    public function testGetTopicsBySubjectGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->subjectType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(5, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->subjectType));
    }

    public function testGetTopicsByDivisionGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->divisionType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(3, $topics->available());
        $topic = $topics->getNextTopic();
        $this->assertInstanceOf('osid_course_Topic', $topic);
        $this->assertTrue($topic->getGenusType()->isEqual($this->divisionType));
    }

    public function testGetTopicsByOtherGenusType()
    {
        $topics = $this->session->getTopicsByGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertFalse($topics->hasNext());

        $topics = $this->session->getTopicsByGenusType($this->unknownType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertFalse($topics->hasNext());
    }

    public function testGetTopicsByRequirementParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->requirementType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(2, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->requirementType));
    }

    public function testGetTopicsByDepartmentParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->departmentType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(4, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->departmentType));
    }

    public function testGetTopicsByBlockParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->blockType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(1, $topics->available());
        $topic = $topics->getNextTopic();
        $this->assertInstanceOf('osid_course_Topic', $topic);
        $this->assertTrue($topic->getGenusType()->isEqual($this->blockType));
    }

    public function testGetTopicsBySubjectParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->subjectType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(5, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertTrue($topics->getNextTopic()->getGenusType()->isEqual($this->subjectType));
    }

    public function testGetTopicsByDivisionParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->divisionType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(3, $topics->available());
        $topic = $topics->getNextTopic();
        $this->assertInstanceOf('osid_course_Topic', $topic);
        $this->assertTrue($topic->getGenusType()->isEqual($this->divisionType));
    }

    public function testGetTopicsByOtherParentGenusType()
    {
        $topics = $this->session->getTopicsByParentGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertFalse($topics->hasNext());

        $topics = $this->session->getTopicsByParentGenusType($this->unknownType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertFalse($topics->hasNext());
    }

    public function testGetTopicsByRecordType()
    {
        $topics = $this->session->getTopicsByRecordType($this->unknownType);
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertFalse($topics->hasNext());
    }

    public function testGetTopics()
    {
        $topics = $this->session->getTopics();
        $this->assertInstanceOf('osid_course_TopicList', $topics);
        $this->assertTrue($topics->hasNext());
        $this->assertEquals(18, $topics->available());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
        $this->assertInstanceOf('osid_course_Topic', $topics->getNextTopic());
    }
}
