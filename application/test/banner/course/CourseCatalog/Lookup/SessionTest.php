<?php

/**
 * Test class for banner_course_CourseCatalog_Lookup_Session.
 * Generated by PHPUnit on 2009-04-15 at 10:58:33.
 */
class banner_course_CourseCatalog_Lookup_SessionTest extends phpkit_test_phpunit_AbstractOsidSessionTest
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseCatalog_Lookup_Session
     */
    protected osid_course_CourseCatalogLookupSession $session;

    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_id_Id $unknownId;
    private osid_id_Id $termId;
    private osid_type_Type $unknownType;
    private osid_type_Type $generaNoneType;
    private osid_type_Type $secondaryType;
    private osid_type_Type $undergraduateType;

    /**
     * Answer the session object to test.
     *
     * @return osid_OsidSession
     *
     * @since 4/15/09
     */
    protected function getSession()
    {
        return $this->session;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->session = self::getCourseManager()->getCourseCatalogLookupSession();

        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MIIS');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:unknown_id');

        $this->unknownType = new phpkit_type_URNInetType('urn:inet:osid-org:unknown_type');

        $this->generaNoneType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:none');
        $this->secondaryType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:secondary');
        $this->undergraduateType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:undergraduate');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->session->close();
    }

    /**
     * Should drop unknown results from the list.
     */
    public function testUseComparativeCourseCatalogView()
    {
        $this->session->useComparativeCourseCatalogView();
        $catalogs = $this->session->getCourseCatalogsByIds(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->miisId,
            $this->unknownId]));
        $this->assertEquals(2, $catalogs->available());
    }

    /**
     * Should thrown osid_NotFoundExceptions for unknown results.
     */
    public function testUsePlenaryCourseCatalogView()
    {
        $this->expectException(osid_NotFoundException::class);

        $this->session->usePlenaryCourseCatalogView();
        $catalogs = $this->session->getCourseCatalogsByIds(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->miisId,
            $this->unknownId]));
        $this->assertEquals(2, $catalogs->available());
    }

    /**
     * @todo Implement testCanLookupCourseCatalog().
     */
    public function testCanLookupCourseCatalog()
    {
        $this->assertTrue($this->session->canLookupCourseCatalog());
    }

    /**
     * @todo Implement testGetCourseCatalog().
     */
    public function testGetCourseCatalog()
    {
        $this->assertInstanceOf('osid_course_CourseCatalog', $this->session->getCourseCatalog($this->mcugId));
        $this->assertInstanceOf('osid_course_CourseCatalog', $this->session->getCourseCatalog($this->miisId));
        try {
            $catalog = $this->session->getCourseCatalog($this->unknownId);
            $this->fail('An osid_NotFoundException should have been thrown.');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true);
        }
    }

    /**
     * @todo Implement testGetCourseCatalogsByIds().
     */
    public function testGetCourseCatalogsByIds()
    {
        $this->session->useComparativeCourseCatalogView();
        $catalogs = $this->session->getCourseCatalogsByIds(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->miisId]));
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertEquals(2, $catalogs->available());
    }

    /**
     * @todo Implement testGetCourseCatalogsByGenusType().
     */
    public function testGetCourseCatalogsByGenusType()
    {
        $catalogs = $this->session->getCourseCatalogsByGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertTrue($catalogs->hasNext());

        $catalogs = $this->session->getCourseCatalogsByGenusType($this->secondaryType);
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertFalse($catalogs->hasNext());
    }

    /**
     * @todo Implement testGetCourseCatalogsByParentGenusType().
     */
    public function testGetCourseCatalogsByParentGenusType()
    {
        $catalogs = $this->session->getCourseCatalogsByGenusType($this->generaNoneType);
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertTrue($catalogs->hasNext());

        $catalogs = $this->session->getCourseCatalogsByGenusType($this->secondaryType);
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertFalse($catalogs->hasNext());
    }

    /**
     * @todo Implement testGetCourseCatalogsByRecordType().
     */
    public function testGetCourseCatalogsByRecordType()
    {
        $catalogs = $this->session->getCourseCatalogsByRecordType($this->unknownType);
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertFalse($catalogs->hasNext());
    }

    /**
     * @todo Implement testGetCourseCatalogs().
     */
    public function testGetCourseCatalogs()
    {
        $catalogs = $this->session->getCourseCatalogs();
        $this->assertInstanceOf('osid_course_CourseCatalogList', $catalogs);
        $this->assertTrue($catalogs->hasNext());
    }
}
