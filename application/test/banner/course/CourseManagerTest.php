<?php

/**
 * Test class for banner_course_CourseManager.
 * Generated by PHPUnit on 2009-04-14 at 15:00:23.
 */
class banner_course_CourseManagerTest extends phpkit_test_phpunit_AbstractOsidManagerTest
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseManager
     */
    protected osid_OsidManager $manager;

    protected osid_id_Id $mcugId;

    /**
     * Answer the manager object to test.
     *
     * @return osid_OsidManager
     *
     * @since 4/15/09
     */
    protected function getManager()
    {
        return $this->manager;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MCUG');
        $this->manager = self::$runtimeManager->getManager(osid_OSID::COURSE(), 'banner_course_CourseManager', '3.0.0');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        if ($this->manager) {
            $this->manager->shutdown();
        }
    }

    /**
     * Test that a PDO object is returned.
     */
    //     public function testGetDB()
    //     {
    //        $this->assertInstanceOf('PDO', $this->manager->getDB());
    //     }

    /**
     * Test that the id Authority is that specified in our test config.
     */
    //     public function testGetIdAuthority()
    //     {
    //        $this->assertEquals('middlebury.edu', $this->manager->getIdAuthority());
    //     }

    /**
     * Ensure that we cannot initialize the manager again.
     */
    public function testInitialize()
    {
        $this->expectException(osid_IllegalStateException::class);

        $this->manager->initialize(self::$runtimeManager);
    }

    public function testGetCourseLookupSession()
    {
        $this->assertInstanceOf('osid_course_CourseLookupSession', $this->manager->getCourseLookupSession());
    }

    public function testGetCourseLookupSessionForCatalog()
    {
        $this->assertInstanceOf('osid_course_CourseLookupSession', $this->manager->getCourseLookupSessionForCatalog($this->mcugId));
    }

    public function testGetCourseSearchSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseSearch()) {
            $this->assertInstanceOf('osid_course_CourseSearchSession', $this->manager->getCourseSearchSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseSearchSession', $this->manager->getCourseSearchSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseSearchSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseSearch()) {
            $this->assertInstanceOf('osid_course_CourseSearchSession', $this->manager->getCourseSearchSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseSearchSession', $this->manager->getCourseSearchSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseAdminSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseAdmin()) {
            $this->assertInstanceOf('osid_course_CourseAdminSession', $this->manager->getCourseAdminSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->manager->getCourseAdminSession();
                $this->fail('Should have thrown an osid_UnimplementedException');
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseAdminSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseAdmin()) {
            $this->assertInstanceOf('osid_course_CourseAdminSession', $this->manager->getCourseAdminSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseAdminSession', $this->manager->getCourseAdminSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseNotificationSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseNotification()) {
            $this->assertInstanceOf('osid_course_CourseNotificationSession', $this->manager->getCourseNotificationSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseNotificationSession', $this->manager->getCourseNotificationSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseNotificationSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseNotification()) {
            $this->assertInstanceOf('osid_course_CourseNotificationSession', $this->manager->getCourseNotificationSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseNotificationSession', $this->manager->getCourseNotificationSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalog()) {
            $this->assertInstanceOf('osid_course_CourseCatalogSession', $this->manager->getCourseCatalogSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogSession', $this->manager->getCourseCatalogSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogAssignmentSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogAssignment()) {
            $this->assertInstanceOf('osid_course_CourseCatalogAssignmentSession', $this->manager->getCourseCatalogAssignmentSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogAssignmentSession', $this->manager->getCourseCatalogAssignmentSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingLookupSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingLookup()) {
            $this->assertInstanceOf('osid_course_CourseOfferingLookupSession', $this->manager->getCourseOfferingLookupSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingLookupSession', $this->manager->getCourseOfferingLookupSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingLookupSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingLookup()) {
            $this->assertInstanceOf('osid_course_CourseOfferingLookupSession', $this->manager->getCourseOfferingLookupSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingLookupSession', $this->manager->getCourseOfferingLookupSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingSearchSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingSearch()) {
            $this->assertInstanceOf('osid_course_CourseOfferingSearchSession', $this->manager->getCourseOfferingSearchSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingSearchSession', $this->manager->getCourseOfferingSearchSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingSearchSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingSearch()) {
            $this->assertInstanceOf('osid_course_CourseOfferingSearchSession', $this->manager->getCourseOfferingSearchSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingSearchSession', $this->manager->getCourseOfferingSearchSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingAdminSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingAdmin()) {
            $this->assertInstanceOf('osid_course_CourseOfferingAdminSession', $this->manager->getCourseOfferingAdminSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingAdminSession', $this->manager->getCourseOfferingAdminSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingAdminSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingAdmin()) {
            $this->assertInstanceOf('osid_course_CourseOfferingAdminSession', $this->manager->getCourseOfferingAdminSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingAdminSession', $this->manager->getCourseOfferingAdminSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingNotificationSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingNotification()) {
            $this->assertInstanceOf('osid_course_CourseOfferingNotificationSession', $this->manager->getCourseOfferingNotificationSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingNotificationSession', $this->manager->getCourseOfferingNotificationSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingNotificationSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingNotification()) {
            $this->assertInstanceOf('osid_course_CourseOfferingNotificationSession', $this->manager->getCourseOfferingNotificationSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingNotificationSession', $this->manager->getCourseOfferingNotificationSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingHierarchySession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingHierarchy()) {
            $this->assertInstanceOf('osid_course_CourseOfferingHierarchySession', $this->manager->getCourseOfferingHierarchySession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingHierarchySession', $this->manager->getCourseOfferingHierarchySession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingHierarchyDesignSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingHierarchyDesign()) {
            $this->assertInstanceOf('osid_course_CourseOfferingHierarchyDesignSession', $this->manager->getCourseOfferingHierarchyDesignSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingHierarchyDesignSession', $this->manager->getCourseOfferingHierarchyDesignSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingCatalogSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingCatalog()) {
            $this->assertInstanceOf('osid_course_CourseOfferingCatalogSession', $this->manager->getCourseOfferingCatalogSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingCatalogSession', $this->manager->getCourseOfferingCatalogSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseOfferingCatalogAssignmentSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseOfferingCatalogAssignment()) {
            $this->assertInstanceOf('osid_course_CourseOfferingCatalogAssignmentSession', $this->manager->getCourseOfferingCatalogAssignmentSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseOfferingCatalogAssignmentSession', $this->manager->getCourseOfferingCatalogAssignmentSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermLookupSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermLookup()) {
            $this->assertInstanceOf('osid_course_TermLookupSession', $this->manager->getTermLookupSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermLookupSession', $this->manager->getTermLookupSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermLookupSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermLookup()) {
            $this->assertInstanceOf('osid_course_TermLookupSession', $this->manager->getTermLookupSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermLookupSession', $this->manager->getTermLookupSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermSearchSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermSearch()) {
            $this->assertInstanceOf('osid_course_TermSearchSession', $this->manager->getTermSearchSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermSearchSession', $this->manager->getTermSearchSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermSearchSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermSearch()) {
            $this->assertInstanceOf('osid_course_TermSearchSession', $this->manager->getTermSearchSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermSearchSession', $this->manager->getTermSearchSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermAdminSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermAdmin()) {
            $this->assertInstanceOf('osid_course_TermAdminSession', $this->manager->getTermAdminSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermAdminSession', $this->manager->getTermAdminSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermAdminSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermAdmin()) {
            $this->assertInstanceOf('osid_course_TermAdminSession', $this->manager->getTermAdminSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermAdminSession', $this->manager->getTermAdminSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermNotificationSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermNotification()) {
            $this->assertInstanceOf('osid_course_TermNotificationSession', $this->manager->getTermNotificationSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermNotificationSession', $this->manager->getTermNotificationSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermNotificationSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermNotification()) {
            $this->assertInstanceOf('osid_course_TermNotificationSession', $this->manager->getTermNotificationSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermNotificationSession', $this->manager->getTermNotificationSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermHierarchySession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermHierarchy()) {
            $this->assertInstanceOf('osid_course_TermHierarchySession', $this->manager->getTermHierarchySession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermHierarchySession', $this->manager->getTermHierarchySession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermHierarchyDesignSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermHierarchyDesign()) {
            $this->assertInstanceOf('osid_course_TermHierarchyDesignSession', $this->manager->getTermHierarchyDesignSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermHierarchyDesignSession', $this->manager->getTermHierarchyDesignSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermCatalogSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermCatalog()) {
            $this->assertInstanceOf('osid_course_TermCatalogSession', $this->manager->getTermCatalogSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermCatalogSession', $this->manager->getTermCatalogSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTermCatalogAssignmentSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTermCatalogAssignment()) {
            $this->assertInstanceOf('osid_course_TermCatalogAssignmentSession', $this->manager->getTermCatalogAssignmentSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TermCatalogAssignmentSession', $this->manager->getTermCatalogAssignmentSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicLookupSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicLookup()) {
            $this->assertInstanceOf('osid_course_TopicLookupSession', $this->manager->getTopicLookupSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicLookupSession', $this->manager->getTopicLookupSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicLookupSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicLookup()) {
            $this->assertInstanceOf('osid_course_TopicLookupSession', $this->manager->getTopicLookupSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicLookupSession', $this->manager->getTopicLookupSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicSearchSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicSearch()) {
            $this->assertInstanceOf('osid_course_TopicSearchSession', $this->manager->getTopicSearchSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicSearchSession', $this->manager->getTopicSearchSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicSearchSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicSearch()) {
            $this->assertInstanceOf('osid_course_TopicSearchSession', $this->manager->getTopicSearchSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicSearchSession', $this->manager->getTopicSearchSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicAdminSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicAdmin()) {
            $this->assertInstanceOf('osid_course_TopicAdminSession', $this->manager->getTopicAdminSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicAdminSession', $this->manager->getTopicAdminSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicAdminSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicAdmin()) {
            $this->assertInstanceOf('osid_course_TopicAdminSession', $this->manager->getTopicAdminSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicAdminSession', $this->manager->getTopicAdminSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicNotificationSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicNotification()) {
            $this->assertInstanceOf('osid_course_TopicNotificationSession', $this->manager->getTopicNotificationSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicNotificationSession', $this->manager->getTopicNotificationSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicNotificationSessionForCatalog()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicNotification()) {
            $this->assertInstanceOf('osid_course_TopicNotificationSession', $this->manager->getTopicNotificationSessionForCatalog($this->mcugId));
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicNotificationSession', $this->manager->getTopicNotificationSessionForCatalog($this->mcugId));
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicHierarchySession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicHierarchy()) {
            $this->assertInstanceOf('osid_course_TopicHierarchySession', $this->manager->getTopicHierarchySession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicHierarchySession', $this->manager->getTopicHierarchySession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicHierarchyDesignSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicHierarchyDesign()) {
            $this->assertInstanceOf('osid_course_TopicHierarchyDesignSession', $this->manager->getTopicHierarchyDesignSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicHierarchyDesignSession', $this->manager->getTopicHierarchyDesignSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicCatalogSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicCatalog()) {
            $this->assertInstanceOf('osid_course_TopicCatalogSession', $this->manager->getTopicCatalogSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicCatalogSession', $this->manager->getTopicCatalogSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetTopicCatalogAssignmentSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsTopicCatalogAssignment()) {
            $this->assertInstanceOf('osid_course_TopicCatalogAssignmentSession', $this->manager->getTopicCatalogAssignmentSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_TopicCatalogAssignmentSession', $this->manager->getTopicCatalogAssignmentSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogLookupSession()
    {
        $this->assertInstanceOf('osid_course_CourseCatalogLookupSession', $this->manager->getCourseCatalogLookupSession());
    }

    public function testGetCourseCatalogSearchSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogSearch()) {
            $this->assertInstanceOf('osid_course_CourseCatalogSearchSession', $this->manager->getCourseCatalogSearchSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogSearchSession', $this->manager->getCourseCatalogSearchSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogAdminSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogAdmin()) {
            $this->assertInstanceOf('osid_course_CourseCatalogAdminSession', $this->manager->getCourseCatalogAdminSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogAdminSession', $this->manager->getCourseCatalogAdminSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogNotificationSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogNotification()) {
            $this->assertInstanceOf('osid_course_CourseCatalogNotificationSession', $this->manager->getCourseCatalogNotificationSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogNotificationSession', $this->manager->getCourseCatalogNotificationSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogHierarchySession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogHierarchy()) {
            $this->assertInstanceOf('osid_course_CourseCatalogHierarchySession', $this->manager->getCourseCatalogHierarchySession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogHierarchySession', $this->manager->getCourseCatalogHierarchySession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetCourseCatalogHierarchyDesignSession()
    {
        // If supported, validate our session response
        if ($this->manager->supportsCourseCatalogHierarchyDesign()) {
            $this->assertInstanceOf('osid_course_CourseCatalogHierarchyDesignSession', $this->manager->getCourseCatalogHierarchyDesignSession());
        }
        // Otherwise, ensure that the propper exception is thrown
        else {
            try {
                $this->assertInstanceOf('osid_course_CourseCatalogHierarchyDesignSession', $this->manager->getCourseCatalogHierarchyDesignSession());
            } catch (osid_UnimplementedException $e) {
                $this->assertTrue(true);
            }
        }
    }

    public function testGetResourceManager()
    {
        $this->assertInstanceOf('osid_resource_ResourceManager', $this->manager->getResourceManager());
    }

    public function testGetCalendarManager()
    {
        try {
            $this->assertInstanceOf('osid_calendaring_CalendarManager', $this->manager->getCalendarManager());
        } catch (osid_OperationFailedException $e) {
            $this->markTestIncomplete('getCalendarManager() needs to be fully implemented..');
        }
    }

    public function testGetLearningManager()
    {
        try {
            $this->assertInstanceOf('osid_learning_ObjectiveManager', $this->manager->getLearningManager());
        } catch (osid_OperationFailedException $e) {
            $this->markTestIncomplete('getLearningManager() needs to be fully implemented..');
        }
    }

    public function testSupportsVisibleFederation()
    {
        $this->assertTrue($this->manager->supportsVisibleFederation());
    }

    public function testSupportsCourseLookup()
    {
        $this->assertTrue($this->manager->supportsCourseLookup());
    }

    public function testSupportsCourseSearch()
    {
        $this->assertTrue($this->manager->supportsCourseLookup());
    }

    public function testSupportsCourseAdmin()
    {
        $this->assertFalse($this->manager->supportsCourseAdmin());
        $this->markTestIncomplete('supportsCourseAdmin should be true.');
    }

    public function testSupportsCourseNotification()
    {
        $this->assertFalse($this->manager->supportsCourseNotification());
    }

    public function testSupportsCourseCatalog()
    {
        $this->assertTrue($this->manager->supportsCourseCatalog());
    }

    public function testSupportsCourseCatalogAssignment()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseOfferingLookup()
    {
        $this->assertTrue($this->manager->supportsCourseOfferingLookup());
    }

    public function testSupportsCourseOfferingSearch()
    {
        $this->assertTrue($this->manager->supportsCourseOfferingSearch());
    }

    public function testSupportsCourseOfferingAdmin()
    {
        $this->assertFalse($this->manager->supportsCourseOfferingAdmin());
        $this->markTestIncomplete('supportsCourseOfferingSearch should be true.');
    }

    public function testSupportsCourseOfferingNotification()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseOfferingHierarchy()
    {
        $this->assertFalse($this->manager->supportsCourseOfferingHierarchy());
    }

    public function testSupportsCourseOfferingHierarchyDesign()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseOfferingHierarchySequencing()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseOfferingCatalog()
    {
        $this->assertTrue($this->manager->supportsCourseOfferingCatalog());
    }

    public function testSupportsCourseOfferingCatalogAssignment()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermLookup()
    {
        $this->assertTrue($this->manager->supportsTermLookup());
    }

    public function testSupportsTermSearch()
    {
        $this->assertFalse($this->manager->supportsTermSearch());
    }

    public function testSupportsTermAdmin()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermNotification()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermHierarchy()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermHierarchyDesign()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermHierarchySequencing()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermCatalog()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTermCatalogAssignment()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicLookup()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicSearch()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicAdmin()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicNotification()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicHierarchy()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicHierarchyDesign()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicHierarchySequencing()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicCatalog()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsTopicCatalogAssignment()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseCatalogLookup()
    {
        $this->assertTrue($this->manager->supportsCourseCatalogLookup());
    }

    public function testSupportsCourseCatalogSearch()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseCatalogAdmin()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogAdmin());
    }

    public function testSupportsCourseCatalogNotification()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseCatalogHierarchy()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseCatalogHierarchyDesign()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testSupportsCourseCatalogSequencing()
    {
        $this->assertFalse($this->manager->supportsCourseCatalogSearch());
    }

    public function testGetCourseRecordTypes()
    {
        $types = $this->manager->getCourseRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetCourseSearchRecordTypes()
    {
        $types = $this->manager->getCourseSearchRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseSearchRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseSearchRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseSearchRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseSearchRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetCourseOfferingRecordTypes()
    {
        $types = $this->manager->getCourseOfferingRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseOfferingRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseOfferingRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseOfferingRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseOfferingRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetCourseOfferingSearchTypes()
    {
        $types = $this->manager->getCourseOfferingSearchTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseOfferingSearchType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseOfferingSearchTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseOfferingSearchType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseOfferingSearchType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetTermRecordTypes()
    {
        $types = $this->manager->getTermRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsTermRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getTermRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsTermRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsTermRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetTermSearchRecordTypes()
    {
        $types = $this->manager->getTermSearchRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsTermSearchRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getTermSearchRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsTermSearchRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsTermSearchRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetTopicRecordTypes()
    {
        $types = $this->manager->getTopicRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsTopicRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getTopicRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsTopicRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsTopicRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetTopicSearchRecordTypes()
    {
        $types = $this->manager->getTopicSearchRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsTopicSearchRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getTopicSearchRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsTopicSearchRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsTopicSearchRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetCourseCatalogRecordTypes()
    {
        $types = $this->manager->getCourseCatalogRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseCatalogRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseCatalogRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseCatalogRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseCatalogRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }

    public function testGetCourseCatalogSearchRecordTypes()
    {
        $types = $this->manager->getCourseCatalogSearchRecordTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);

        // Check for any needed types or an empty list.
        $this->assertFalse($types->hasNext());
    }

    public function testSupportsCourseCatalogSearchRecordType()
    {
        // Check support for any types listed
        $types = $this->manager->getCourseCatalogSearchRecordTypes();
        while ($types->hasNext()) {
            $this->assertTrue($this->manager->supportsCourseCatalogSearchRecordType($types->getNextType()));
        }

        // Check for not supporting another type
        $this->assertFalse($this->manager->supportsCourseCatalogSearchRecordType(new phpkit_type_URNInetType('urn:inet:middlebury.edu:nonexistanttype')));
    }
}
