<?php

use PHPUnit\Framework\TestCase;

/**
 * Test class for banner_course_Course_Search_Order.
 * Generated by PHPUnit on 2009-10-15 at 16:13:23.
 */
class banner_course_Course_Search_OrderTest extends TestCase
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_Course_Search_Order
     */
    protected osid_course_CourseSearchOrder $object;

    private osid_type_Type $wildcardStringMatchType;
    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_id_Id $unknownId;
    private osid_course_CourseSearchSession $session;
    private osid_course_CourseQuery $query;
    private osid_course_CourseSearch $search;
    private osid_id_Id $physId;
    private osid_id_Id $geolId;
    private osid_id_Id $deptTopicId;
    private osid_id_Id $subjTopicId;
    private osid_id_Id $divTopicId;
    private osid_type_Type $unknownType;
    private osid_type_Type $generaNoneType;
    private osid_type_Type $secondaryType;
    private osid_type_Type $undergraduateType;
    private osid_type_Type $instructorsType;
    private osid_type_Type $otherType;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MIIS');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:unknown_id');

        $this->session = self::$courseManager->getCourseSearchSessionForCatalog($this->mcugId);

        $this->wildcardStringMatchType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:search:wildcard');

        $this->query = $this->session->getCourseQuery();
        $this->query->matchNumber('*0*', $this->wildcardStringMatchType, true);

        $this->search = $this->session->getCourseSearch();

        $this->object = $this->session->getCourseSearchOrder();

        $this->physId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.PHYS0201');
        $this->geolId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.GEOL0250');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.XXXX0101');

        $this->deptTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.department.PHYS');
        $this->subjTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.subject.CHEM');
        $this->divTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic.division.NSCI');

        $this->unknownType = new phpkit_type_URNInetType('urn:inet:osid.org:unknown_type');

        $this->generaNoneType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:none');
        $this->secondaryType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:secondary');
        $this->undergraduateType = new phpkit_type_URNInetType('urn:inet:osid.org:genera:undergraduate');

        $this->instructorsType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:instructors');
        $this->otherType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:other');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->search->orderCourseResults($this->object);
        $results = $this->session->getCoursesBySearch($this->query, $this->search);
        $this->assertEquals(4, $results->getResultSize());
    }

    /**
     * @todo Implement testAscend().
     */
    public function testAscend()
    {
        $this->object->orderByTitle();
        $this->object->ascend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE ASC', $this->object->getOrderByClause());
        $this->object->descend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE DESC', $this->object->getOrderByClause());
        $this->object->ascend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE ASC', $this->object->getOrderByClause());
    }

    /**
     * @todo Implement testDescend().
     */
    public function testDescend()
    {
        $this->object->orderByTitle();
        $this->object->descend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE DESC', $this->object->getOrderByClause());
        $this->object->ascend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE ASC', $this->object->getOrderByClause());
        $this->object->descend();
        $this->assertEquals('ORDER BY SCBCRSE_TITLE DESC', $this->object->getOrderByClause());
    }

    /**
     * @todo Implement testOrderByDisplayName().
     */
    public function testOrderByDisplayName()
    {
        $this->object->orderByDisplayName();
        $this->object->descend();
        $this->assertEquals('ORDER BY SCBCRSE_SUBJ_CODE DESC, SCBCRSE_CRSE_NUMB DESC', $this->object->getOrderByClause());
        $this->assertCount(0, $this->object->getAdditionalTableJoins());
    }

    /**
     * @todo Implement testOrderByGenusType().
     */
    public function testOrderByGenusType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOrderByTitle().
     */
    public function testOrderByTitle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOrderByNumber().
     */
    public function testOrderByNumber()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOrderByCredits().
     */
    public function testOrderByCredits()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOrderByPrereqInfo().
     */
    public function testOrderByPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testHasRecordType()
    {
        //         $this->assertTrue($this->object->hasRecordType($this->instructorsType));
        $this->assertFalse($this->object->hasRecordType($this->otherType));
    }

    public function testImplementsRecordType()
    {
        //     	$record = $this->object->getCourseSearchOrderRecord($this->instructorsType);
        //         $this->assertTrue($record->implementsRecordType($this->instructorsType));
        //         $this->assertFalse($record->implementsRecordType($this->otherType));
    }

    public function testGetCourseSearchOrder()
    {
        //         $record = $this->object->getCourseSearchOrderRecord($this->instructorsType);
        //         $order = $record->getCourseSearchOrder();
        //         $this->assertInstanceOf('osid_course_CourseSearchOrder', $order);
    }

    public function testGetCourseSearchOrderRecord()
    {
        //         $record = $this->object->getCourseSearchOrderRecord($this->instructorsType);
        //         $this->assertInstanceOf('osid_course_CourseSearchOrderRecord', $record);
    }

    public function testGetCourseSearchOrderRecordOther()
    {
        $this->expectException(osid_UnsupportedException::class);

        $record = $this->object->getCourseSearchOrderRecord($this->otherType);
        $this->assertInstanceOf('osid_course_CourseSearchOrderRecord', $record);
    }
}
