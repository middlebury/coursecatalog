<?php

/**
 * Test class for banner_course_Course_Catalog_Session.
 * Generated by PHPUnit on 2009-04-23 at 13:53:35.
 */
class banner_course_Course_Catalog_SessionTest extends phpkit_test_phpunit_AbstractOsidSessionTest
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseCatalog_Lookup_Session
     */
    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_id_Id $unknownId;
    private osid_course_CourseCatalogSession $session;
    private osid_id_Id $chemId;

    /**
     * Answer the session object to test.
     *
     * @return osid_OsidSession
     *
     * @since 4/15/09
     */
    protected function getSession()
    {
        return $this->session;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->session = self::$courseManager->getCourseCatalogSession();

        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog.MIIS');
        $this->unknownId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:unknown_id');

        $this->chemId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course.CHEM0104');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->session->close();
    }

    /**
     * @todo Implement testUseComparativeCourseCatalogView().
     */
    public function testUseComparativeCourseCatalogView()
    {
        $this->session->useComparativeCourseCatalogView();
        $courseIds = $this->session->getCourseIdsByCatalogs(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->unknownId]));
        $this->assertEquals(4, $courseIds->available());

        $courses = $this->session->getCoursesByCatalogs(new phpkit_id_ArrayIdList([
            $this->mcugId,
            $this->unknownId]));
        $this->assertEquals(4, $courses->available());
    }

    /**
     * @todo Implement testUsePlenaryCourseCatalogView().
     */
    public function testUsePlenaryCourseCatalogView()
    {
        $this->session->usePlenaryCourseCatalogView();
        try {
            $courseIds = $this->session->getCourseIdsByCatalogs(new phpkit_id_ArrayIdList([
                $this->unknownId,
                $this->mcugId,
            ]));
            $this->fail('Should have thrown an osid_NotFoundException');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true, 'Saw the expected exception.');
        }

        try {
            $courses = $this->session->getCoursesByCatalogs(new phpkit_id_ArrayIdList([
                $this->unknownId,
                $this->mcugId,
            ]));
            $this->fail('Should have thrown an osid_NotFoundException');
        } catch (osid_NotFoundException $e) {
            $this->assertTrue(true, 'Saw the expected exception.');
        }
    }

    /**
     * @todo Implement testCanLookupCourseCatalogMappings().
     */
    public function testCanLookupCourseCatalogMappings()
    {
        $this->assertTrue($this->session->canLookupCourseCatalogMappings());
    }

    /**
     * @todo Implement testGetCourseIdsByCatalog().
     */
    public function testGetCourseIdsByCatalog()
    {
        $courseIds = $this->session->getCourseIdsByCatalog($this->mcugId);
        $this->assertInstanceOf('osid_id_IdList', $courseIds);
        $this->assertEquals(4, $courseIds->available());
        $this->assertInstanceOf('osid_id_Id', $courseIds->getNextId());
    }

    /**
     * @todo Implement testGetCoursesByCatalog().
     */
    public function testGetCoursesByCatalog()
    {
        $courses = $this->session->getCoursesByCatalog($this->mcugId);
        $this->assertInstanceOf('osid_course_CourseList', $courses);
        $this->assertEquals(4, $courses->available());
        $this->assertInstanceOf('osid_course_Course', $courses->getNextCourse());
    }

    /**
     * @todo Implement testGetCourseIdsByCatalogs().
     */
    public function testGetCourseIdsByCatalogs()
    {
        $courseIds = $this->session->getCourseIdsByCatalogs(new phpkit_id_ArrayIdList([
            $this->mcugId]));
        $this->assertInstanceOf('osid_id_IdList', $courseIds);
        $this->assertEquals(4, $courseIds->available());
        $this->assertInstanceOf('osid_id_Id', $courseIds->getNextId());
    }

    /**
     * @todo Implement testGetCoursesByCatalogs().
     */
    public function testGetCoursesByCatalogs()
    {
        $courses = $this->session->getCoursesByCatalogs(new phpkit_id_ArrayIdList([
            $this->mcugId]));
        $this->assertInstanceOf('osid_course_CourseList', $courses);
        $this->assertEquals(4, $courses->available());
        $this->assertInstanceOf('osid_course_Course', $courses->getNextCourse());
    }

    /**
     * @todo Implement testGetCatalogIdsByCourse().
     */
    public function testGetCatalogIdsByCourse()
    {
        $catalogIds = $this->session->getCatalogIdsByCourse($this->chemId);
        $this->assertEquals(1, $catalogIds->available());
        $this->assertTrue($catalogIds->getNextId()->isEqual($this->mcugId));
    }

    /**
     * @todo Implement testGetCatalogsByCourse().
     */
    public function testGetCatalogsByCourse()
    {
        $catalogs = $this->session->getCatalogsByCourse($this->chemId);
        $this->assertEquals(1, $catalogs->available());
        $this->assertTrue($catalogs->getNextCourseCatalog()->getId()->isEqual($this->mcugId));
    }
}
