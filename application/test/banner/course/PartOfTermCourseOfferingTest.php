<?php

/**
 * Test class for banner_course_CourseOffering.
 * Generated by PHPUnit on 2009-04-16 at 10:31:07.
 */
class banner_course_PartOfTermCourseOfferingTest extends phpkit_test_phpunit_AbstractOsidObjectTest
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseOffering
     */
    protected osid_course_CourseOffering $object;

    private osid_id_Id $mclsCatalogId;
    private osid_id_Id $hebmCourseId;
    private osid_id_Id $hebmOfferingId;
    private osid_id_Id $mcugCatalogId;
    private osid_id_Id $physCourseId;
    private osid_id_Id $physOfferingId;
    private osid_id_Id $physId;
    private osid_course_CourseOfferingLookupSession $session;
    private osid_course_CourseOfferingSearchSession $searchSession;
    private osid_type_Type $instructorsType;
    private osid_type_Type $weeklyScheduleType;
    private osid_type_Type $alternatesType;
    private osid_type_Type $namesType;

    /**
     * Answer the Object to test.
     *
     * @return osid_OsidObject
     *
     * @since 4/15/09
     */
    protected function getObject()
    {
        return $this->object;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->mclsCatalogId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MCLS');
        $this->hebmCourseId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course-HEBM5642');
        $this->hebmOfferingId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:section-201690-92587');
        $this->mcugCatalogId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MCUG');
        $this->physCourseId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course-PHYS0201');
        $this->physOfferingId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:section-200390-90260');
        $this->physId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course-PHYS0201');

        $this->session = self::getCourseManager()->getCourseOfferingLookupSessionForCatalog($this->mclsCatalogId);
        $this->searchSession = self::getCourseManager()->getCourseOfferingSearchSessionForCatalog($this->mclsCatalogId);
        $this->object = $this->session->getCourseOffering($this->hebmOfferingId);

        $this->instructorsType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:instructors');
        $this->weeklyScheduleType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:weekly_schedule');
        $this->alternatesType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:alternates');

        $this->namesType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:person_names');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    public function testGetTermId()
    {
        $this->assertInstanceOf('osid_id_Id', $this->object->getTermId());
        $this->assertEquals('term-201690-HBM', $this->object->getTermId()->getIdentifier());
    }

    public function testGetTerm()
    {
        $term = $this->object->getTerm();
        $this->assertInstanceOf('osid_course_Term', $term);
        $this->assertEquals('term-201690-HBM', $term->getId()->getIdentifier());
    }

    public function testTermStartDate()
    {
        $term = $this->object->getTerm();
        $this->assertEquals(new DateTime('2016-09-18'), $term->getStartTime());
    }

    public function testTermEndDate()
    {
        $term = $this->object->getTerm();
        $this->assertEquals(new DateTime('2016-12-07'), $term->getEndTime());
    }

    /**
     * Offerings are part of their base term, even if they have a part-of-term.
     */
    public function testOfferingFoundInBaseTerm()
    {
        $offerings = $this->session->getCourseOfferingsByTermForCourse(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-201690'), $this->hebmCourseId);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->hebmOfferingId->isEqual($offering->getId()));
    }

    /**
     * Offerings should also be found in their part-of-term when that is the term-id.
     */
    public function testOfferingFoundInPartOfTerm()
    {
        $offerings = $this->session->getCourseOfferingsByTermForCourse(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-201690-HBM'), $this->hebmCourseId);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->hebmOfferingId->isEqual($offering->getId()));
    }

    /**
     * Offerings are part of their base term, even if they have a part-of-term.
     */
    public function testOfferingSearchBaseTerm()
    {
        $query = $this->searchSession->getCourseOfferingQuery();
        $query->matchTermId(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-201690'), true);
        $offerings = $this->searchSession->getCourseOfferingsByQuery($query);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->hebmOfferingId->isEqual($offering->getId()));
    }

    /**
     * Offerings should also be found in their part-of-term when that is the term-id.
     */
    public function testOfferingSearchPartOfTerm()
    {
        $query = $this->searchSession->getCourseOfferingQuery();
        $query->matchTermId(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-201690-HBM'), true);
        $offerings = $this->searchSession->getCourseOfferingsByQuery($query);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->hebmOfferingId->isEqual($offering->getId()));
    }

    /**
     * Test with another offering. Offerings are part of their base term, even if they have a part-of-term.
     */
    public function testOfferingSearchBaseTermUg()
    {
        $this->searchSession = self::getCourseManager()->getCourseOfferingSearchSessionForCatalog($this->mcugCatalogId);

        $query = $this->searchSession->getCourseOfferingQuery();
        $query->matchTermId(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-200390'), true);
        $query->matchCourseId($this->physId, true);
        $offerings = $this->searchSession->getCourseOfferingsByQuery($query);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->physOfferingId->isEqual($offering->getId()));
    }

    /**
     * Test with another offering, part-of-term = 1- Offerings should also be found in their part-of-term when that is the term-id.
     */
    public function testOfferingSearchPartOfTermUg1()
    {
        $this->searchSession = self::getCourseManager()->getCourseOfferingSearchSessionForCatalog($this->mcugCatalogId);
        $query = $this->searchSession->getCourseOfferingQuery();
        $query->matchTermId(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-200390-1'), true);
        $query->matchCourseId($this->physId, true);
        $offerings = $this->searchSession->getCourseOfferingsByQuery($query);
        $this->assertTrue($offerings->hasNext());
        $offering = $offerings->getNextCourseOffering();
        $this->assertTrue($this->physOfferingId->isEqual($offering->getId()));
    }

    /**
     * UG offerings should not be in HBM part-of-term. Offerings should also be found in their part-of-term when that is the term-id.
     */
    public function testOfferingSearchPartOfTermUgHbm()
    {
        $this->searchSession = self::getCourseManager()->getCourseOfferingSearchSessionForCatalog($this->mcugCatalogId);
        $query = $this->searchSession->getCourseOfferingQuery();
        $query->matchTermId(new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-200390-HBM'), true);
        $query->matchCourseId($this->physId, true);
        $offerings = $this->searchSession->getCourseOfferingsByQuery($query);
        $this->assertFalse($offerings->hasNext());
    }
}
