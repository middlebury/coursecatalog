<?php

use PHPUnit\Framework\TestCase;

/**
 * Test class for banner_course_CourseOffering_Search_Query.
 * Generated by PHPUnit on 2009-05-20 at 16:45:31.
 */
class banner_course_CourseOffering_Search_QueryTest extends TestCase
{
    use banner_DatabaseTestTrait;

    /**
     * @var banner_course_CourseOffering_Search_Query
     */
    protected osid_course_CourseOfferingQuery $object;

    private osid_type_Type $wildcardStringMatchType;
    private osid_id_Id $mcugId;
    private osid_id_Id $miisId;
    private osid_course_CourseOfferingSearchSession $session;
    private osid_id_Id $physId;
    private osid_id_Id $chemId;
    private osid_id_Id $termId;
    private osid_id_Id $termId2;
    private osid_id_Id $physDeptTopicId;
    private osid_id_Id $chemDeptTopicId;
    private osid_id_Id $physSubjTopicId;
    private osid_id_Id $geolSubjTopicId;
    private osid_id_Id $chemSubjTopicId;
    private osid_id_Id $dedReqTopicId;
    private osid_id_Id $sciReqTopicId;
    private osid_id_Id $natsciDivTopicId;
    private osid_id_Id $ugLevelTopicId;
    private osid_id_Id $ccBlockTopicId;
    private osid_type_Type $instructorsType;
    private osid_type_Type $weeklyScheduleType;
    private osid_type_Type $enrollmentType;
    private osid_type_Type $otherType;
    private osid_type_Type $lectureType;
    private osid_type_Type $labType;
    private osid_type_Type $discussionType;
    private osid_id_Id $barryId;
    private osid_id_Id $calvinId;
    private osid_id_Id $mbh216Id;
    private osid_id_Id $mbh560Id;
    private osid_id_Id $mainCampusId;
    private osid_id_Id $breadloafCampusId;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->wildcardStringMatchType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:search:wildcard');

        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MCUG');
        $this->miisId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog-MIIS');

        $this->session = self::getCourseManager()->getCourseOfferingSearchSessionForCatalog($this->mcugId);
        $this->object = $this->session->getCourseOfferingQuery();

        $this->physId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course-PHYS0201');
        $this->chemId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course-CHEM0104');
        $this->termId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-200890');
        $this->termId2 = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term-200790');

        $this->physDeptTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-department-PHYS');
        $this->chemDeptTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-department-CHEM');
        $this->physSubjTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-subject-PHYS');
        $this->geolSubjTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-subject-GEOL');
        $this->chemSubjTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-subject-CHEM');
        $this->dedReqTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-requirement-DED');
        $this->sciReqTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-requirement-SCI');
        $this->natsciDivTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-division-NSCI');
        $this->ugLevelTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-level-UG');
        $this->ccBlockTopicId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:topic-block-CC');

        $this->instructorsType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:instructors');
        $this->weeklyScheduleType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:weekly_schedule');
        $this->enrollmentType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:enrollment');
        $this->otherType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:other');

        $this->lectureType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:offering-LCT');
        $this->labType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:offering-LAB');
        $this->discussionType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:genera:offering-DSC');

        $this->barryId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-person-WEBID1000002');
        $this->calvinId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-person-WEBID1000003');

        $this->mbh216Id = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-place-room-MBH-216');
        $this->mbh560Id = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-place-room-MBH-560');
        $this->mainCampusId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-place-campus-M');
        $this->breadloafCampusId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:resource-place-campus-BL');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    public function testGetWhereClause()
    {
        $this->assertIsString($this->object->getWhereClause());
    }

    public function testGetAdditionalTableJoins()
    {
        $this->assertIsArray($this->object->getAdditionalTableJoins());
    }

    public function testGetParameters()
    {
        $this->assertIsArray($this->object->getParameters());
    }

    public function testGetStringMatchTypes()
    {
        $types = $this->object->getStringMatchTypes();
        $this->assertInstanceOf('osid_type_TypeList', $types);
        $this->assertEquals(2, $types->available());
        $this->assertTrue($this->wildcardStringMatchType->isEqual($types->getNextType()));
    }

    public function testSupportsStringMatchType()
    {
        $this->assertTrue($this->object->supportsStringMatchType($this->wildcardStringMatchType));
    }

    public function testMatchKeyword()
    {
        $this->object->matchKeyword('Quantum', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('Quantum', $params[':co_keyword_param']);
        $this->assertEquals('Quantum', $params[':co_relevence_param']);
        $this->assertCount(2, $params);

        $this->assertEquals('(MATCH (SSBSECT_fulltext) AGAINST (:co_keyword_param IN BOOLEAN MODE))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchKeywords()
    {
        $this->object->matchKeyword('Quantum Environments', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('Quantum Environments', $params[':co_keyword_param']);
        $this->assertEquals('Quantum Environments', $params[':co_relevence_param']);
        $this->assertCount(2, $params);

        $this->assertEquals('(MATCH (SSBSECT_fulltext) AGAINST (:co_keyword_param IN BOOLEAN MODE))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(17, $courseOfferings->available());

        // 		print $courseOfferings->debug();
    }

    public function testMatchKeywordsWithWild()
    {
        $this->object->matchKeyword('Quantum Environment*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('Quantum Environment*', $params[':co_keyword_param']);
        $this->assertEquals('Quantum Environment*', $params[':co_relevence_param']);
        $this->assertCount(2, $params);

        $this->assertEquals('(MATCH (SSBSECT_fulltext) AGAINST (:co_keyword_param IN BOOLEAN MODE))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(17, $courseOfferings->available());
    }

    public function testMatchDisplayName()
    {
        $this->object->matchDisplayName('PHYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchAnyDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchInvalidGenusType()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType('urn:inet:osid.org:genera:none'), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(FALSE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchInvalidGenusTypeInverted()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType('urn:inet:osid.org:genera:none'), false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(NOT FALSE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchLectureGenusType()
    {
        $this->object->matchGenusType($this->lectureType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('LCT', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_SCHD_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(24, $courseOfferings->available());
    }

    public function testMatchLectureGenusTypeInverted()
    {
        $this->object->matchGenusType($this->lectureType, false);

        $params = $this->object->getParameters();
        $this->assertEquals('LCT', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(NOT SSBSECT_SCHD_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94 - 24, $courseOfferings->available());
    }

    public function testMatchLabGenusType()
    {
        $this->object->matchGenusType($this->labType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('LAB', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_SCHD_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(45, $courseOfferings->available());
    }

    public function testMatchDiscussionGenusType()
    {
        $this->object->matchGenusType($this->discussionType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('DSC', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_SCHD_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(25, $courseOfferings->available());
    }

    public function testMatchOtherGenusType()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType('urn:inet:osid.org:genera:stuff'), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(FALSE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchOtherGenusTypeInverted()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType('urn:inet:osid.org:genera:stuff'), false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(NOT FALSE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchParentGenusType()
    {
        $this->object->matchParentGenusType(new phpkit_type_URNInetType('urn:inet:osid.org:genera:none'), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(TRUE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchRecordType()
    {
        $this->object->matchRecordType($this->instructorsType, true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(TRUE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchOtherRecordType()
    {
        $this->object->matchRecordType(new phpkit_type_URNInetType('urn:inet:osid.org:record:other'), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(FALSE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testHasRecordType()
    {
        $this->assertTrue($this->object->hasRecordType($this->instructorsType));
        $this->assertFalse($this->object->hasRecordType(new phpkit_type_URNInetType('urn:inet:osid.org:record:other')));
    }

    public function testMatchTitle()
    {
        $this->object->matchTitle('Relativity And Quantum Physics', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('Relativity And Quantum Physics', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchTitleWithWild()
    {
        $this->object->matchTitle('*Quantum*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%Quantum%', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchTitleWithWildMixedCase()
    {
        $this->object->matchTitle('*qUAntum*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%qUAntum%', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchTitleWithWildAnd()
    {
        $this->object->matchTitle('*and*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%and%', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(17, $courseOfferings->available());
    }

    public function testMatchLabTitle()
    {
        $this->object->matchTitle('*lab*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%lab%', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(44, $courseOfferings->available());
    }

    public function testMatchLabTitleCapital()
    {
        $this->object->matchTitle('*Lab*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%Lab%', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(section_title LIKE(?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(44, $courseOfferings->available());

        while ($courseOfferings->hasNext()) {
            $this->assertGreaterThanOrEqual(1, preg_match('/lab/i', $courseOfferings->getNextCourseOffering()->getTitle()));
        }
    }

    public function testMatchAnyTitle()
    {
        $this->object->matchAnyTitle(true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(section_title IS NOT NULL)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchAnyTitleInverted()
    {
        $this->object->matchAnyTitle(false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(NOT section_title IS NOT NULL)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchNumber()
    {
        $this->object->matchNumber('PHYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild1()
    {
        $this->object->matchNumber('*HYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%HYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild2()
    {
        $this->object->matchNumber('P*YS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('P%YS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild3()
    {
        $this->object->matchNumber('PHY*0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHY%', $params[0]);
        $this->assertEquals('%0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild4()
    {
        $this->object->matchNumber('PH*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PH%', $params[0]);
        $this->assertEquals('%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild5()
    {
        $this->object->matchNumber('PHYS0*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild6()
    {
        $this->object->matchNumber('PHYS0201*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertEquals('F', $params[2]);
        $this->assertEquals('2008%', $params[3]);
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(1, $courseOfferings->available());
    }

    public function testMatchNumberWild7()
    {
        $this->object->matchNumber('PHYS0201A*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchNumberWild8()
    {
        $this->object->matchNumber('PHYS0201A-*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchNumberWild9()
    {
        $this->object->matchNumber('PHYS0201*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchNumberWild10()
    {
        $this->object->matchNumber('PHYS0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchNumberWild11()
    {
        $this->object->matchNumber('PHYS*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(7, $courseOfferings->available());
    }

    public function testMatchNumberWild11a()
    {
        $this->object->matchNumber('CHEM*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(77, $courseOfferings->available());
    }

    public function testMatchNumberWild11c()
    {
        $this->object->matchNumber('GEOL*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('GEOL%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(5, $courseOfferings->available());
    }

    public function testMatchNumberWild11b()
    {
        $this->object->matchNumber('*H*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%H%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(84, $courseOfferings->available());
    }

    public function testMatchNumberWild12()
    {
        $this->object->matchNumber('*0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchNumberWild13()
    {
        $this->object->matchNumber('*0*2*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%2%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(17, $courseOfferings->available());
    }

    public function testMatchNumberWild14()
    {
        $this->object->matchNumber('*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('F', $params[0]);
        $this->assertEquals('2008%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(9, $courseOfferings->available());
    }

    public function testMatchAnyNumber()
    {
        $this->object->matchAnyNumber(true);
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchCredits11()
    {
        $this->object->matchCredits(1, 1, true);

        $params = $this->object->getParameters();
        $this->assertEquals(1.0, $params[0]);
        $this->assertEquals(1.0, $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(24, $courseOfferings->available());
    }

    public function testMatchCredits01()
    {
        $this->object->matchCredits(0, 1, true);

        $params = $this->object->getParameters();
        $this->assertEquals(0.0, $params[0]);
        $this->assertEquals(1.0, $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchCredits22()
    {
        $this->object->matchCredits(2.0, 2.0, true);

        $params = $this->object->getParameters();
        $this->assertEquals(2.0, $params[0]);
        $this->assertEquals(2.0, $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchCredits00()
    {
        $this->object->matchCredits(0.0, 0.0, true);

        $params = $this->object->getParameters();
        $this->assertEquals(0.0, $params[0]);
        $this->assertEquals(0.0, $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(70, $courseOfferings->available());
    }

    public function testMatchAnyCredits()
    {
        $this->object->matchAnyCredits(true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(SSBSECT_CREDIT_HRS > 0)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(24, $courseOfferings->available());
    }

    public function testMatchAnyCreditsInverted()
    {
        $this->object->matchAnyCredits(false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));

        $this->assertEquals('(NOT SSBSECT_CREDIT_HRS > 0)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        $this->assertEquals(70, $courseOfferings->available());
    }

    public function testMatchPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchAnyPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchCourseId()
    {
        $this->object->matchCourseId($this->chemId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM', $params[0]);
        $this->assertEquals('0104', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(77, $courseOfferings->available());
    }

    public function testSupportsCourseQuery()
    {
        $this->assertFalse($this->object->supportsCourseQuery());
    }

    public function testGetCourseQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getCourseQuery();
    }

    public function testMatchTermId()
    {
        $this->object->matchTermId($this->termId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_TERM_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(9, $courseOfferings->available());
    }

    public function testMatchTwoTermIds()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('(SSBSECT_TERM_CODE = ?
		OR SSBSECT_TERM_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(15, $courseOfferings->available());
    }

    public function testMatchTwoTermIdsAndACourseId()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);
        $this->object->matchCourseId($this->chemId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertEquals('CHEM', $params[2]);
        $this->assertEquals('0104', $params[3]);
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('(SSBSECT_TERM_CODE = ?
		OR SSBSECT_TERM_CODE = ?)
	AND ((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(9, $courseOfferings->available());
    }

    public function testMatchTwoTermIdsAndTwoCourseIds()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);
        $this->object->matchCourseId($this->chemId, true);
        $this->object->matchCourseId($this->physId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertEquals('CHEM', $params[2]);
        $this->assertEquals('0104', $params[3]);
        $this->assertEquals('PHYS', $params[4]);
        $this->assertEquals('0201', $params[5]);
        $this->assertFalse(isset($params[6]));

        $this->assertEquals('(SSBSECT_TERM_CODE = ?
		OR SSBSECT_TERM_CODE = ?)
	AND ((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?)
		OR (SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(11, $courseOfferings->available());
    }

    public function testSupportsTermQuery()
    {
        $this->assertFalse($this->object->supportsTermQuery());
    }

    public function testGetTermQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getTermQuery();
    }

    public function testMatchChemDeptTopicId()
    {
        $this->object->matchTopicId($this->chemDeptTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SCBCRSE_DEPT_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(77, $courseOfferings->available());
    }

    public function testMatchNSCIDivTopicId()
    {
        $this->object->matchTopicId($this->natsciDivTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('NSCI', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SCBCRSE_DIVS_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(89, $courseOfferings->available());
    }

    public function testMatchDedReqTopicId()
    {
        $this->object->matchTopicId($this->dedReqTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('DED', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSRATTR_ATTR_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(26, $courseOfferings->available());
    }

    public function testMatchGeolSubjTopicId()
    {
        $this->object->matchTopicId($this->geolSubjTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('GEOL', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_SUBJ_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(5, $courseOfferings->available());
    }

    public function testMatchLevelTopicId()
    {
        $this->object->matchTopicId($this->ugLevelTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('UG', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SCRLEVL_LEVL_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatchCcBlockTopicId()
    {
        $this->object->matchTopicId($this->ccBlockTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CC', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSRBLCK_BLCK_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(2, $courseOfferings->available());
    }

    public function testMatchChemDeptTopicIdAndLectureType()
    {
        $this->object->matchTopicId($this->chemDeptTopicId, true);
        $this->object->matchGenusType($this->lectureType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM', $params[0]);
        $this->assertEquals('LCT', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('(SCBCRSE_DEPT_CODE = ?)
	AND (SSBSECT_SCHD_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(13, $courseOfferings->available());
    }

    public function testMatchChemDeptAndDedTopicIds()
    {
        $this->object->matchTopicId($this->chemDeptTopicId, true);
        $this->object->matchTopicId($this->dedReqTopicId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM', $params[0]);
        $this->assertEquals('DED', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('(SCBCRSE_DEPT_CODE = ?)
	AND (SSRATTR_ATTR_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(16, $courseOfferings->available());
    }

    public function testSupportsTopicQuery()
    {
        $this->assertFalse($this->object->supportsTopicQuery());
    }

    public function testGetTopicQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getTopicQuery();
    }

    public function testMatchLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchAnyLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchLocationIdRoom()
    {
        $this->object->matchLocationId($this->mbh216Id, true);

        $params = $this->object->getParameters();
        $this->assertEquals('MBH', $params[0]);
        $this->assertEquals('216', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BLDG_CODE = ? AND SSRMEET_ROOM_CODE = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(11, $courseOfferings->available());
    }

    public function testMatchLocationId2Rooms()
    {
        $this->object->matchLocationId($this->mbh216Id, true);
        $this->object->matchLocationId($this->mbh560Id, true);

        $params = $this->object->getParameters();
        $this->assertEquals('MBH', $params[0]);
        $this->assertEquals('216', $params[1]);
        $this->assertEquals('MBH', $params[2]);
        $this->assertEquals('560', $params[3]);
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSRMEET_BLDG_CODE = ? AND SSRMEET_ROOM_CODE = ?)
		OR (SSRMEET_BLDG_CODE = ? AND SSRMEET_ROOM_CODE = ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(49, $courseOfferings->available());
    }

    public function testMatchLocationIdCampus()
    {
        $this->object->matchLocationId($this->mainCampusId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('M', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(SSBSECT_CAMP_CODE = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testSupportsLocationQuery()
    {
        $this->assertFalse($this->object->supportsLocationQuery());
    }

    public function testGetLocationQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getLocationQuery();
    }

    public function testMatchAnyLocation()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchAnyScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchCalendarId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testSupportsCalendarQuery()
    {
        $this->assertFalse($this->object->supportsCalendarQuery());
    }

    public function testGetCalendarQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getCalendarQuery();
    }

    public function testMatchAnyCalendar()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchLearningObjectiveId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testSupportsLearningObjectiveQuery()
    {
        $this->assertFalse($this->object->supportsLearningObjectiveQuery());
    }

    public function testGetLearningObjectiveQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getLearningObjectiveQuery();
    }

    public function testMatchAnyLearningObjective()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchCourseCatalogId()
    {
        $this->object->matchCourseCatalogId($this->mcugId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('MCUG', $params[0]);
        $this->assertEquals('MCUG', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSBSECT_TERM_CODE IN (
	SELECT
		term_code
	FROM
		catalog_term
	WHERE
		catalog_id = ?)
AND SCBCRSE_COLL_CODE IN (
		SELECT
			coll_code
		FROM
			course_catalog_college
		WHERE
			catalog_id = ?
	)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testMatch2CourseCatalogIds()
    {
        $this->object->matchCourseCatalogId($this->mcugId, true);
        $this->object->matchCourseCatalogId($this->miisId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('MCUG', $params[0]);
        $this->assertEquals('MCUG', $params[1]);
        $this->assertEquals('MIIS', $params[2]);
        $this->assertEquals('MIIS', $params[3]);
        $this->assertFalse(isset($params[4]));

        $this->assertEquals('((SSBSECT_TERM_CODE IN (
	SELECT
		term_code
	FROM
		catalog_term
	WHERE
		catalog_id = ?)
AND SCBCRSE_COLL_CODE IN (
		SELECT
			coll_code
		FROM
			course_catalog_college
		WHERE
			catalog_id = ?
	))
		OR (SSBSECT_TERM_CODE IN (
	SELECT
		term_code
	FROM
		catalog_term
	WHERE
		catalog_id = ?)
AND SCBCRSE_COLL_CODE IN (
		SELECT
			coll_code
		FROM
			course_catalog_college
		WHERE
			catalog_id = ?
	)))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(94, $courseOfferings->available());
    }

    public function testSupportsCourseCatalogQuery()
    {
        $this->assertFalse($this->object->supportsCourseCatalogQuery());
    }

    public function testGetCourseCatalogQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getCourseCatalogQuery();
    }

    public function testMatchURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testMatchAnyURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testGetCourseOfferingQueryRecord()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->instructorsType);
        $this->assertInstanceOf('osid_course_CourseOfferingQueryRecord', $record);
        $this->assertInstanceOf('middlebury_course_CourseOffering_Search_InstructorsQueryRecord', $record);
    }

    public function testGetCourseOfferingQueryRecordOther()
    {
        $this->expectException(osid_UnsupportedException::class);

        $record = $this->object->getCourseOfferingQueryRecord($this->otherType);
    }

    public function testMatchInstructorId()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->instructorsType);
        $record->matchInstructorId($this->barryId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('WEBID1000002', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(WEB_ID = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(19, $courseOfferings->available());
    }

    public function testMatchSecondInstructorId()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->instructorsType);
        $record->matchInstructorId($this->calvinId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('WEBID1000003', $params[0]);
        $this->assertFalse(isset($params[1]));

        $this->assertEquals('(WEB_ID = ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(3, $courseOfferings->available());
    }

    public function testMatch2InstructorIds()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->instructorsType);
        $record->matchInstructorId($this->barryId, true);
        $record->matchInstructorId($this->calvinId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('WEBID1000002', $params[0]);
        $this->assertEquals('WEBID1000003', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals("(WEB_ID = ?\n\t\tOR WEB_ID = ?)", $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(22, $courseOfferings->available());
    }

    public function testSupportsInstructorQuery()
    {
        $this->assertFalse($this->object->supportsInstructorQuery());
    }

    public function testGetInstructorQuery()
    {
        $this->expectException(osid_UnimplementedException::class);

        $this->object->getInstructorQuery();
    }

    /*********************************************************
     * Tests for methods from middlebury_course_CourseOffering_Search_WeeklyScheduleQueryRecord
     *********************************************************/

    public function testMatchMeetsSunday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsSunday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_SUN_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchMeetsMonday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsMonday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_MON_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(33, $courseOfferings->available());
    }

    public function testMatchMeetsTuesday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsTuesday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_TUE_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(30, $courseOfferings->available());
    }

    public function testMatchMeetsWednesday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsWednesday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_WED_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(22, $courseOfferings->available());
    }

    public function testMatchMeetsThursday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsThursday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_THU_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(25, $courseOfferings->available());
    }

    public function testMatchMeetsFriday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsFriday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_FRI_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(17, $courseOfferings->available());
    }

    public function testMatchMeetsSaturday()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetsSaturday(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSRMEET_SAT_DAY IS NOT NULL)', $this->object->getHavingClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchMeetingTime()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(0, 86400, true);

        $params = $this->object->getParameters();
        $this->assertEquals('0000', $params[0]);
        $this->assertEquals('2400', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(92, $courseOfferings->available()); // A few don't have meeting times.
    }

    public function testMatchMeetingTimeEarlyMorning()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(0, 28800, true);

        $params = $this->object->getParameters();
        $this->assertEquals('0000', $params[0]);
        $this->assertEquals('0800', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchMeetingTimeMorning()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(28800, 43200, true);

        $params = $this->object->getParameters();
        $this->assertEquals('0800', $params[0]);
        $this->assertEquals('1200', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(20, $courseOfferings->available());
    }

    public function testMatchMeetingTimeSpanningNoon()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(39600, 46800, true);

        $params = $this->object->getParameters();
        $this->assertEquals('1100', $params[0]);
        $this->assertEquals('1300', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(17, $courseOfferings->available());
    }

    public function testMatchMeetingTimeAfternoon()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(43200, 61200, true);

        $params = $this->object->getParameters();
        $this->assertEquals('1200', $params[0]);
        $this->assertEquals('1700', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(55, $courseOfferings->available());
    }

    public function testMatchMeetingTimeEvening()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->weeklyScheduleType);
        $record->matchMeetingTime(61200, 86400, true);

        $params = $this->object->getParameters();
        $this->assertEquals('1700', $params[0]);
        $this->assertEquals('2400', $params[1]);
        $this->assertFalse(isset($params[2]));

        $this->assertEquals('((SSRMEET_BEGIN_TIME >= ? AND SSRMEET_END_TIME <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(0, $courseOfferings->available());
    }

    public function testMatchEnrollable()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchEnrollable(true);

        $params = $this->object->getParameters();
        $this->assertCount(0, $params);

        $this->assertEquals('(SSBSECT_MAX_ENRL > 0)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(92, $courseOfferings->available());
    }

    public function testMatchEnrollment()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchEnrollment(1, null, true);

        $params = $this->object->getParameters();
        $this->assertCount(1, $params);
        $this->assertEquals(1, $params[0]);

        $this->assertEquals('(SSBSECT_ENRL >= ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(81, $courseOfferings->available());
    }

    public function testMatchEnrollment1020()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchEnrollment(10, 20, true);

        $params = $this->object->getParameters();
        $this->assertCount(2, $params);
        $this->assertEquals(10, $params[0]);
        $this->assertEquals(20, $params[1]);

        $this->assertEquals('((SSBSECT_ENRL >= ? AND SSBSECT_ENRL <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(44, $courseOfferings->available());
    }

    public function testMatchEnrollmentNullStart()
    {
        $this->expectException(osid_NullArgumentException::class);

        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchEnrollment(null, 2, true);
    }

    public function testMatchEnrollmentNegative()
    {
        $this->expectException(osid_InvalidArgumentException::class);

        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchEnrollment(-1, 2, true);
    }

    public function testMatchSeatsAvailable()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchSeatsAvailable(1, null, true);

        $params = $this->object->getParameters();
        $this->assertCount(1, $params);
        $this->assertEquals(1, $params[0]);

        $this->assertEquals('(SSBSECT_SEATS_AVAIL >= ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(88, $courseOfferings->available());
    }

    public function testMatchSeatsAvailable1020()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchSeatsAvailable(10, 20, true);

        $params = $this->object->getParameters();
        $this->assertCount(2, $params);
        $this->assertEquals(10, $params[0]);
        $this->assertEquals(20, $params[1]);

        $this->assertEquals('((SSBSECT_SEATS_AVAIL >= ? AND SSBSECT_SEATS_AVAIL <= ?))', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(25, $courseOfferings->available());
    }

    public function testMatchSeatsAvailableBothNull()
    {
        $this->expectException(osid_NullArgumentException::class);

        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchSeatsAvailable(null, null, true);
    }

    public function testMatchSeatsAvailableNegative()
    {
        $record = $this->object->getCourseOfferingQueryRecord($this->enrollmentType);
        $record->matchSeatsAvailable(null, -1, true);

        $params = $this->object->getParameters();
        $this->assertCount(1, $params);
        $this->assertEquals(-1, $params[0]);

        $this->assertEquals('(SSBSECT_SEATS_AVAIL <= ?)', $this->object->getWhereClause());

        $courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
        // 		print $courseOfferings->debug();
        $this->assertEquals(2, $courseOfferings->available());
    }
}
